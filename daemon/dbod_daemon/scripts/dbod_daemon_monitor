#!/usr/bin/perl -w

package dbod_daemon_monitor;

use strict;
use DBOD;
use DBOD::Database;

# Initializes Logging Settings

our ($logger, $lock_file); 

INIT{
    $logger = Log::Log4perl::get_logger("DBOD.DaemonMonitor");
    $logger->debug("Logger created");
}

sub usage() {
    print "USAGE:\n\tcommand\n";
    exit -1;
}

sub is_running() {
    my $output = `/etc/init.d/dbod_daemon status`;
    my @lines = split('\n', $output);
    my ($pidfile, $pid);
    foreach my $line (@lines){
        # I think this can be done shorter using an additional regexp to extract
        # the PID and PIDFILE, but as it's now, it just works
        if ($line =~ /^PIDFILE/) {
            my @buf = split(' ', $line);
            my $temp = $buf[1];
            if (defined($temp)) { $pidfile = $temp; }
            else { $pidfile = 0 }
        }
        if ($line =~ /^PID:/) {
            my @buf = split(' ', $line);
            my $temp = $buf[1];
            if (defined($temp)) { $pid = $temp; }
            else { $pid = 0 }
            }
        }
    if (!defined($pidfile) || !defined($pid) || ($pid == 0) || ($pidfile == 0)) { return 0; }
    elsif ($pid != $pidfile) { return 0; }
    else { return 1; }
}

sub Main{

    usage() if (@ARGV != 0);

    #Checking Execution status
    my ($output, $rc);

    if (is_running()){
        $logger->debug( "Found DBOD daemon process" ); 
        $logger->debug( "Opening database connection" );
        my $dbh = DBOD::Database::getDBH();

        if (defined($dbh)){
            my $pending_jobs = DBOD::Database::getPendingJobs($dbh);
            $logger->debug( "Found $pending_jobs stalled job(s).");
            if ((defined $pending_jobs) && ($pending_jobs > 0)) {
                $logger->debug( "Re-starting DBOD Daemon" );
                # Stops daemon. This clears locks and pid files
                $output = `/etc/init.d/dbod_daemon stop`;
                $logger->debug( $output );
                $output = `/etc/init.d/dbod_daemon start`;
                $logger->debug( $output );
            }
            else{
                $logger->debug( "No stalled jobs. Doing Nothing");
            }
            $logger->debug( "Closing DB connection" );
            $dbh->disconnect();
            $rc = 0;
        }
        else{
            $logger->error( "Unable to connect to database" );
            $rc = -1;
        }
    }
    else{
        # Stops daemon. This clears locks and pid files
        $logger->debug( "Process not found. Cleaning DBOD Daemon files" );
        $output = `/etc/init.d/dbod_daemon stop`;
        $logger->debug( $output );
        $logger->debug( "Starting DBOD Daemon");
        $output = `/etc/init.d/dbod_daemon start`;
        $logger->debug( $output);
        $rc = 0;
    }
    exit $rc;
}

&Main();

END{}

=head1 NAME

dbod_daemon_monitor - Status monitor for the DBOD Daemon

=cut

=head1 USE

=over

=item * 

dbod_daemon_monitor

=back

=cut

=head1 COMMENTS

This program is in charge of checking the current execution status of the DBOD daemon.
It will poll the service database in order to check that no jobs have been in the PENDING
state more than a certain number of seconds (set in JOB_MAX_PENDING_TIME).
If this situation occurs if will restart the daemon in order clean the DB connection.

It will also ensure that existing running PID and expected PID (as can be found
in /var/run/dbod_daemon/dbod_daemon.pid) are synchronized. If their values are
different, it will perform a restart cycle of the daemon process, as this would
be an indicator of something unusual happening to the execution environment.

Configuration and additional support files (i.e. templates for DBMS configuration files)
can be found at: <PATH_TO_PERL_SHARE>/DBOD/. Expected files are:

- dbod_daemon.conf : General configuration file. YAML format

- dbod_daemon_logger.conf : Logger configuration file

=head1 AUTHOR

Ignacio Coterillo <ignacio.coterillo[at]cern[dot]ch> 

IT-DB-DBB


=cut
