
package ch.cern.dbod.ws.authentication;

import java.net.URL;
import java.util.logging.Logger;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;


/**
 * <h2>CERN Lightweight Registration - Authentication WebService</h2>Detailed documentation can be found in this document: <a href="http://cern.ch/CERNAccount/Help/?kbid=011020" target=_blank>http://cern.ch/CERNAccount/Help/?kbid=011020</a><br>&nbsp;<br>&nbsp;<br>
 * 
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "Authentication", targetNamespace = "https://winservices-soap.web.cern.ch/winservices-soap/Generic/Authentication.asmx", wsdlLocation = "classpath:/ch/cern/dbod/ws/wsdl/authentication.wsdl")
public class Authentication
    extends Service
{

    private final static URL AUTHENTICATION_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(ch.cern.dbod.ws.authentication.Authentication.class.getName());

    static {
        AUTHENTICATION_WSDL_LOCATION = ch.cern.dbod.ws.authentication.Authentication.class.getResource("/ch/cern/dbod/ws/wsdl/authentication.wsdl");
    }

    public Authentication(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Authentication() {
        super(AUTHENTICATION_WSDL_LOCATION, new QName("https://winservices-soap.web.cern.ch/winservices-soap/Generic/Authentication.asmx", "Authentication"));
    }

    /**
     * 
     * @return
     *     returns AuthenticationSoap
     */
    @WebEndpoint(name = "AuthenticationSoap")
    public AuthenticationSoap getAuthenticationSoap() {
        return super.getPort(new QName("https://winservices-soap.web.cern.ch/winservices-soap/Generic/Authentication.asmx", "AuthenticationSoap"), AuthenticationSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AuthenticationSoap
     */
    @WebEndpoint(name = "AuthenticationSoap")
    public AuthenticationSoap getAuthenticationSoap(WebServiceFeature... features) {
        return super.getPort(new QName("https://winservices-soap.web.cern.ch/winservices-soap/Generic/Authentication.asmx", "AuthenticationSoap"), AuthenticationSoap.class, features);
    }

}
